import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic Tac Toe")

        self.current_player = "X"
        self.players = {"X": "Player 1(X)", "O": "Player 2(O)"}
        self.board = [["" for _ in range(3)] for _ in range(3)]

        self.buttons = [[None for _ in range(3)] for _ in range(3)]

        self.turn_label = tk.Label(root, text=f"Turn: {self.players[self.current_player]}", font=("Helvetica", 12))
        self.turn_label.grid(row=3, columnspan=3)

        for row in range(3):
            for col in range(3):
                self.buttons[row][col] = tk.Button(root, text="", width=10, height=3, command=lambda r=row, c=col: self.make_move(r, c))
                self.buttons[row][col].grid(row=row, column=col)

        self.new_game_button = tk.Button(root, text="New Game", command=self.new_game)
        self.new_game_button.grid(row=4, columnspan=3)

    def make_move(self, row, col):
        if not self.board[row][col]:
            self.board[row][col] = self.current_player
            self.buttons[row][col].config(text=self.current_player)
            if self.check_winner():
                winner = self.players[self.current_player]
                self.show_game_over_message(winner)
            elif self.is_board_full():
                self.show_game_over_message("It's a draw!")
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
                self.turn_label.config(text=f"Turn: {self.players[self.current_player]}")

    def show_game_over_message(self, result):
        msg = f"{result}\nDo you want to start a new game?"
        response = messagebox.askquestion("Game Over", msg)

        if response == 'yes':
            self.new_game()
        else:
            self.root.destroy()
            
    def new_game(self):
        for row in range(3):
            for col in range(3):
                self.board[row][col] = ""
                self.buttons[row][col].config(text="")
        self.current_player = "X"
        self.turn_label.config(text=f"Turn: {self.players[self.current_player]}")

    def check_winner(self):
        for row in range(3):
            if self.board[row][0] == self.board[row][1] == self.board[row][2] != "":
                return True
        for col in range(3):
            if self.board[0][col] == self.board[1][col] == self.board[2][col] != "":
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != "":
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != "":
            return True
        return False

    def is_board_full(self):
        return all(all(cell != "" for cell in row) for row in self.board)

def main():
    root = tk.Tk()
    app = TicTacToe(root)
    root.mainloop()

if __name__ == "__main__":
    main()
